// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: network-service.proto

package proto_radar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkService_ChangeNetworkConfig_FullMethodName     = "/networkService.NetworkService/ChangeNetworkConfig"
	NetworkService_GetCurrentNetworkConfig_FullMethodName = "/networkService.NetworkService/GetCurrentNetworkConfig"
	NetworkService_SetTimeSyncMode_FullMethodName         = "/networkService.NetworkService/SetTimeSyncMode"
	NetworkService_GetCurrentTime_FullMethodName          = "/networkService.NetworkService/GetCurrentTime"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// Управление сетью
	ChangeNetworkConfig(ctx context.Context, in *NetworkConfig, opts ...grpc.CallOption) (*NetworkConfigResponse, error)
	GetCurrentNetworkConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrentNetworkConfigResponse, error)
	// Управление временем
	SetTimeSyncMode(ctx context.Context, in *TimeSyncRequest, opts ...grpc.CallOption) (*Response, error)
	GetCurrentTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimeResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) ChangeNetworkConfig(ctx context.Context, in *NetworkConfig, opts ...grpc.CallOption) (*NetworkConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkConfigResponse)
	err := c.cc.Invoke(ctx, NetworkService_ChangeNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetCurrentNetworkConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrentNetworkConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentNetworkConfigResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetCurrentNetworkConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) SetTimeSyncMode(ctx context.Context, in *TimeSyncRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NetworkService_SetTimeSyncMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetCurrentTime(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetCurrentTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility.
type NetworkServiceServer interface {
	// Управление сетью
	ChangeNetworkConfig(context.Context, *NetworkConfig) (*NetworkConfigResponse, error)
	GetCurrentNetworkConfig(context.Context, *Empty) (*CurrentNetworkConfigResponse, error)
	// Управление временем
	SetTimeSyncMode(context.Context, *TimeSyncRequest) (*Response, error)
	GetCurrentTime(context.Context, *Empty) (*TimeResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkServiceServer struct{}

func (UnimplementedNetworkServiceServer) ChangeNetworkConfig(context.Context, *NetworkConfig) (*NetworkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNetworkConfig not implemented")
}
func (UnimplementedNetworkServiceServer) GetCurrentNetworkConfig(context.Context, *Empty) (*CurrentNetworkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentNetworkConfig not implemented")
}
func (UnimplementedNetworkServiceServer) SetTimeSyncMode(context.Context, *TimeSyncRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeSyncMode not implemented")
}
func (UnimplementedNetworkServiceServer) GetCurrentTime(context.Context, *Empty) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTime not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}
func (UnimplementedNetworkServiceServer) testEmbeddedByValue()                        {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetworkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_ChangeNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).ChangeNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_ChangeNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).ChangeNetworkConfig(ctx, req.(*NetworkConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetCurrentNetworkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetCurrentNetworkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetCurrentNetworkConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetCurrentNetworkConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_SetTimeSyncMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).SetTimeSyncMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_SetTimeSyncMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).SetTimeSyncMode(ctx, req.(*TimeSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetCurrentTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetCurrentTime(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkService.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeNetworkConfig",
			Handler:    _NetworkService_ChangeNetworkConfig_Handler,
		},
		{
			MethodName: "GetCurrentNetworkConfig",
			Handler:    _NetworkService_GetCurrentNetworkConfig_Handler,
		},
		{
			MethodName: "SetTimeSyncMode",
			Handler:    _NetworkService_SetTimeSyncMode_Handler,
		},
		{
			MethodName: "GetCurrentTime",
			Handler:    _NetworkService_GetCurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network-service.proto",
}
