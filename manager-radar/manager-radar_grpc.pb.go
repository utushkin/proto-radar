// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: manager-radar.proto

package proto_radar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RadarService_CreateRadar_FullMethodName            = "/radar.RadarService/CreateRadar"
	RadarService_UpdateRadar_FullMethodName            = "/radar.RadarService/UpdateRadar"
	RadarService_GetRadar_FullMethodName               = "/radar.RadarService/GetRadar"
	RadarService_GetAllRadars_FullMethodName           = "/radar.RadarService/GetAllRadars"
	RadarService_DeleteRadar_FullMethodName            = "/radar.RadarService/DeleteRadar"
	RadarService_GetTimeZones_FullMethodName           = "/radar.RadarService/GetTimeZones"
	RadarService_GetRadarModels_FullMethodName         = "/radar.RadarService/GetRadarModels"
	RadarService_GetDevice_FullMethodName              = "/radar.RadarService/GetDevice"
	RadarService_UpdateDevice_FullMethodName           = "/radar.RadarService/UpdateDevice"
	RadarService_GetTransportObjectInfo_FullMethodName = "/radar.RadarService/GetTransportObjectInfo"
	RadarService_GetExportsTypes_FullMethodName        = "/radar.RadarService/GetExportsTypes"
	RadarService_GetExportStatuses_FullMethodName      = "/radar.RadarService/GetExportStatuses"
	RadarService_CreateExport_FullMethodName           = "/radar.RadarService/CreateExport"
	RadarService_UpdateExport_FullMethodName           = "/radar.RadarService/UpdateExport"
	RadarService_GetExport_FullMethodName              = "/radar.RadarService/GetExport"
	RadarService_GetAllExports_FullMethodName          = "/radar.RadarService/GetAllExports"
	RadarService_DeleteExport_FullMethodName           = "/radar.RadarService/DeleteExport"
)

// RadarServiceClient is the client API for RadarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса радара
type RadarServiceClient interface {
	CreateRadar(ctx context.Context, in *CreateRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error)
	UpdateRadar(ctx context.Context, in *UpdateRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error)
	GetRadar(ctx context.Context, in *GetRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error)
	GetAllRadars(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RadarsResponse, error)
	DeleteRadar(ctx context.Context, in *DeleteRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error)
	GetTimeZones(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeZonesResponse, error)
	GetRadarModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RadarModelsResponse, error)
	GetDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeviceResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	GetTransportObjectInfo(ctx context.Context, in *GetTransportObjectInfoRequest, opts ...grpc.CallOption) (*GetTransportObjectInfoResponse, error)
	GetExportsTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetExportTypesResponse, error)
	GetExportStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetExportStatusesResponse, error)
	CreateExport(ctx context.Context, in *CreateExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	UpdateExport(ctx context.Context, in *UpdateExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	GetExport(ctx context.Context, in *GetExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	GetAllExports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExportsResponse, error)
	DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type radarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRadarServiceClient(cc grpc.ClientConnInterface) RadarServiceClient {
	return &radarServiceClient{cc}
}

func (c *radarServiceClient) CreateRadar(ctx context.Context, in *CreateRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RadarResponse)
	err := c.cc.Invoke(ctx, RadarService_CreateRadar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) UpdateRadar(ctx context.Context, in *UpdateRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RadarResponse)
	err := c.cc.Invoke(ctx, RadarService_UpdateRadar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetRadar(ctx context.Context, in *GetRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RadarResponse)
	err := c.cc.Invoke(ctx, RadarService_GetRadar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetAllRadars(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RadarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RadarsResponse)
	err := c.cc.Invoke(ctx, RadarService_GetAllRadars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) DeleteRadar(ctx context.Context, in *DeleteRadarRequest, opts ...grpc.CallOption) (*RadarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RadarResponse)
	err := c.cc.Invoke(ctx, RadarService_DeleteRadar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetTimeZones(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeZonesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeZonesResponse)
	err := c.cc.Invoke(ctx, RadarService_GetTimeZones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetRadarModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RadarModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RadarModelsResponse)
	err := c.cc.Invoke(ctx, RadarService_GetRadarModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, RadarService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, RadarService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetTransportObjectInfo(ctx context.Context, in *GetTransportObjectInfoRequest, opts ...grpc.CallOption) (*GetTransportObjectInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportObjectInfoResponse)
	err := c.cc.Invoke(ctx, RadarService_GetTransportObjectInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetExportsTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetExportTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExportTypesResponse)
	err := c.cc.Invoke(ctx, RadarService_GetExportsTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetExportStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetExportStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExportStatusesResponse)
	err := c.cc.Invoke(ctx, RadarService_GetExportStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) CreateExport(ctx context.Context, in *CreateExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, RadarService_CreateExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) UpdateExport(ctx context.Context, in *UpdateExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, RadarService_UpdateExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetExport(ctx context.Context, in *GetExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, RadarService_GetExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) GetAllExports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportsResponse)
	err := c.cc.Invoke(ctx, RadarService_GetAllExports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarServiceClient) DeleteExport(ctx context.Context, in *DeleteExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, RadarService_DeleteExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RadarServiceServer is the server API for RadarService service.
// All implementations must embed UnimplementedRadarServiceServer
// for forward compatibility.
//
// Определение сервиса радара
type RadarServiceServer interface {
	CreateRadar(context.Context, *CreateRadarRequest) (*RadarResponse, error)
	UpdateRadar(context.Context, *UpdateRadarRequest) (*RadarResponse, error)
	GetRadar(context.Context, *GetRadarRequest) (*RadarResponse, error)
	GetAllRadars(context.Context, *emptypb.Empty) (*RadarsResponse, error)
	DeleteRadar(context.Context, *DeleteRadarRequest) (*RadarResponse, error)
	GetTimeZones(context.Context, *emptypb.Empty) (*TimeZonesResponse, error)
	GetRadarModels(context.Context, *emptypb.Empty) (*RadarModelsResponse, error)
	GetDevice(context.Context, *emptypb.Empty) (*DeviceResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*DeviceResponse, error)
	GetTransportObjectInfo(context.Context, *GetTransportObjectInfoRequest) (*GetTransportObjectInfoResponse, error)
	GetExportsTypes(context.Context, *emptypb.Empty) (*GetExportTypesResponse, error)
	GetExportStatuses(context.Context, *emptypb.Empty) (*GetExportStatusesResponse, error)
	CreateExport(context.Context, *CreateExportRequest) (*ExportResponse, error)
	UpdateExport(context.Context, *UpdateExportRequest) (*ExportResponse, error)
	GetExport(context.Context, *GetExportRequest) (*ExportResponse, error)
	GetAllExports(context.Context, *emptypb.Empty) (*ExportsResponse, error)
	DeleteExport(context.Context, *DeleteExportRequest) (*ExportResponse, error)
	mustEmbedUnimplementedRadarServiceServer()
}

// UnimplementedRadarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRadarServiceServer struct{}

func (UnimplementedRadarServiceServer) CreateRadar(context.Context, *CreateRadarRequest) (*RadarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRadar not implemented")
}
func (UnimplementedRadarServiceServer) UpdateRadar(context.Context, *UpdateRadarRequest) (*RadarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRadar not implemented")
}
func (UnimplementedRadarServiceServer) GetRadar(context.Context, *GetRadarRequest) (*RadarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRadar not implemented")
}
func (UnimplementedRadarServiceServer) GetAllRadars(context.Context, *emptypb.Empty) (*RadarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRadars not implemented")
}
func (UnimplementedRadarServiceServer) DeleteRadar(context.Context, *DeleteRadarRequest) (*RadarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRadar not implemented")
}
func (UnimplementedRadarServiceServer) GetTimeZones(context.Context, *emptypb.Empty) (*TimeZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeZones not implemented")
}
func (UnimplementedRadarServiceServer) GetRadarModels(context.Context, *emptypb.Empty) (*RadarModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRadarModels not implemented")
}
func (UnimplementedRadarServiceServer) GetDevice(context.Context, *emptypb.Empty) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedRadarServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedRadarServiceServer) GetTransportObjectInfo(context.Context, *GetTransportObjectInfoRequest) (*GetTransportObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportObjectInfo not implemented")
}
func (UnimplementedRadarServiceServer) GetExportsTypes(context.Context, *emptypb.Empty) (*GetExportTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportsTypes not implemented")
}
func (UnimplementedRadarServiceServer) GetExportStatuses(context.Context, *emptypb.Empty) (*GetExportStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportStatuses not implemented")
}
func (UnimplementedRadarServiceServer) CreateExport(context.Context, *CreateExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExport not implemented")
}
func (UnimplementedRadarServiceServer) UpdateExport(context.Context, *UpdateExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExport not implemented")
}
func (UnimplementedRadarServiceServer) GetExport(context.Context, *GetExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExport not implemented")
}
func (UnimplementedRadarServiceServer) GetAllExports(context.Context, *emptypb.Empty) (*ExportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExports not implemented")
}
func (UnimplementedRadarServiceServer) DeleteExport(context.Context, *DeleteExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExport not implemented")
}
func (UnimplementedRadarServiceServer) mustEmbedUnimplementedRadarServiceServer() {}
func (UnimplementedRadarServiceServer) testEmbeddedByValue()                      {}

// UnsafeRadarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadarServiceServer will
// result in compilation errors.
type UnsafeRadarServiceServer interface {
	mustEmbedUnimplementedRadarServiceServer()
}

func RegisterRadarServiceServer(s grpc.ServiceRegistrar, srv RadarServiceServer) {
	// If the following call pancis, it indicates UnimplementedRadarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RadarService_ServiceDesc, srv)
}

func _RadarService_CreateRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).CreateRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_CreateRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).CreateRadar(ctx, req.(*CreateRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_UpdateRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).UpdateRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_UpdateRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).UpdateRadar(ctx, req.(*UpdateRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetRadar(ctx, req.(*GetRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetAllRadars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetAllRadars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetAllRadars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetAllRadars(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_DeleteRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).DeleteRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_DeleteRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).DeleteRadar(ctx, req.(*DeleteRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetTimeZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetTimeZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetTimeZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetTimeZones(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetRadarModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetRadarModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetRadarModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetRadarModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetDevice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetTransportObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportObjectInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetTransportObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetTransportObjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetTransportObjectInfo(ctx, req.(*GetTransportObjectInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetExportsTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetExportsTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetExportsTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetExportsTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetExportStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetExportStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetExportStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetExportStatuses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_CreateExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).CreateExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_CreateExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).CreateExport(ctx, req.(*CreateExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_UpdateExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).UpdateExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_UpdateExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).UpdateExport(ctx, req.(*UpdateExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetExport(ctx, req.(*GetExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_GetAllExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).GetAllExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_GetAllExports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).GetAllExports(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadarService_DeleteExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServiceServer).DeleteExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadarService_DeleteExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServiceServer).DeleteExport(ctx, req.(*DeleteExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RadarService_ServiceDesc is the grpc.ServiceDesc for RadarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RadarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "radar.RadarService",
	HandlerType: (*RadarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRadar",
			Handler:    _RadarService_CreateRadar_Handler,
		},
		{
			MethodName: "UpdateRadar",
			Handler:    _RadarService_UpdateRadar_Handler,
		},
		{
			MethodName: "GetRadar",
			Handler:    _RadarService_GetRadar_Handler,
		},
		{
			MethodName: "GetAllRadars",
			Handler:    _RadarService_GetAllRadars_Handler,
		},
		{
			MethodName: "DeleteRadar",
			Handler:    _RadarService_DeleteRadar_Handler,
		},
		{
			MethodName: "GetTimeZones",
			Handler:    _RadarService_GetTimeZones_Handler,
		},
		{
			MethodName: "GetRadarModels",
			Handler:    _RadarService_GetRadarModels_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _RadarService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _RadarService_UpdateDevice_Handler,
		},
		{
			MethodName: "GetTransportObjectInfo",
			Handler:    _RadarService_GetTransportObjectInfo_Handler,
		},
		{
			MethodName: "GetExportsTypes",
			Handler:    _RadarService_GetExportsTypes_Handler,
		},
		{
			MethodName: "GetExportStatuses",
			Handler:    _RadarService_GetExportStatuses_Handler,
		},
		{
			MethodName: "CreateExport",
			Handler:    _RadarService_CreateExport_Handler,
		},
		{
			MethodName: "UpdateExport",
			Handler:    _RadarService_UpdateExport_Handler,
		},
		{
			MethodName: "GetExport",
			Handler:    _RadarService_GetExport_Handler,
		},
		{
			MethodName: "GetAllExports",
			Handler:    _RadarService_GetAllExports_Handler,
		},
		{
			MethodName: "DeleteExport",
			Handler:    _RadarService_DeleteExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager-radar.proto",
}
