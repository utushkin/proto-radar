// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: manager-radar.proto

package proto_radar

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Структура радара
type Radar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // Идентификатор радара
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Название радара
	Lat       float64 `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon       float64 `protobuf:"fixed64,4,opt,name=lon,proto3" json:"lon,omitempty"`
	Azimuth   float32 `protobuf:"fixed32,5,opt,name=azimuth,proto3" json:"azimuth,omitempty"`         // Азимут
	Direction *string `protobuf:"bytes,6,opt,name=direction,proto3,oneof" json:"direction,omitempty"` // Направление
	Address   string  `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`           // Адрес
	Ip        string  `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`                     // IP-адрес
	Serial    string  `protobuf:"bytes,9,opt,name=serial,proto3" json:"serial,omitempty"`             // Серийный номер
	Model     string  `protobuf:"bytes,10,opt,name=model,proto3" json:"model,omitempty"`              // Модель радара
}

func (x *Radar) Reset() {
	*x = Radar{}
	mi := &file_manager_radar_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Radar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radar) ProtoMessage() {}

func (x *Radar) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radar.ProtoReflect.Descriptor instead.
func (*Radar) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{0}
}

func (x *Radar) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Radar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Radar) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Radar) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Radar) GetAzimuth() float32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *Radar) GetDirection() string {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ""
}

func (x *Radar) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Radar) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Radar) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *Radar) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Ответ сервиса
type RadarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radar *Radar `protobuf:"bytes,1,opt,name=radar,proto3" json:"radar,omitempty"` // Ответ с радаром (при создании или обновлении)
}

func (x *RadarResponse) Reset() {
	*x = RadarResponse{}
	mi := &file_manager_radar_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RadarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarResponse) ProtoMessage() {}

func (x *RadarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarResponse.ProtoReflect.Descriptor instead.
func (*RadarResponse) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{1}
}

func (x *RadarResponse) GetRadar() *Radar {
	if x != nil {
		return x.Radar
	}
	return nil
}

// Ответ сервиса
type RadarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radars []*Radar `protobuf:"bytes,1,rep,name=radars,proto3" json:"radars,omitempty"` // Ответ с массивом радаров (при получении всех)
}

func (x *RadarsResponse) Reset() {
	*x = RadarsResponse{}
	mi := &file_manager_radar_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RadarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarsResponse) ProtoMessage() {}

func (x *RadarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarsResponse.ProtoReflect.Descriptor instead.
func (*RadarsResponse) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{2}
}

func (x *RadarsResponse) GetRadars() []*Radar {
	if x != nil {
		return x.Radars
	}
	return nil
}

// Запрос на создание радара
type CreateRadarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radar *Radar `protobuf:"bytes,1,opt,name=radar,proto3" json:"radar,omitempty"` // Радар для создания
}

func (x *CreateRadarRequest) Reset() {
	*x = CreateRadarRequest{}
	mi := &file_manager_radar_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRadarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRadarRequest) ProtoMessage() {}

func (x *CreateRadarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRadarRequest.ProtoReflect.Descriptor instead.
func (*CreateRadarRequest) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRadarRequest) GetRadar() *Radar {
	if x != nil {
		return x.Radar
	}
	return nil
}

// Запрос на обновление радара
type UpdateRadarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`       // Идентификатор радара
	Radar *Radar `protobuf:"bytes,2,opt,name=radar,proto3" json:"radar,omitempty"` // Обновленные данные радара
}

func (x *UpdateRadarRequest) Reset() {
	*x = UpdateRadarRequest{}
	mi := &file_manager_radar_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRadarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRadarRequest) ProtoMessage() {}

func (x *UpdateRadarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRadarRequest.ProtoReflect.Descriptor instead.
func (*UpdateRadarRequest) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRadarRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRadarRequest) GetRadar() *Radar {
	if x != nil {
		return x.Radar
	}
	return nil
}

type RecognitionsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorIds     []string `protobuf:"bytes,1,rep,name=sensor_ids,json=sensorIds,proto3" json:"sensor_ids,omitempty"`
	HeadingFrom   float64  `protobuf:"fixed64,2,opt,name=heading_from,json=headingFrom,proto3" json:"heading_from,omitempty"`
	HeadingTo     float64  `protobuf:"fixed64,3,opt,name=heading_to,json=headingTo,proto3" json:"heading_to,omitempty"`
	LengthFrom    float64  `protobuf:"fixed64,4,opt,name=length_from,json=lengthFrom,proto3" json:"length_from,omitempty"`
	LengthTo      float64  `protobuf:"fixed64,5,opt,name=length_to,json=lengthTo,proto3" json:"length_to,omitempty"`
	SpeedFrom     float64  `protobuf:"fixed64,6,opt,name=speed_from,json=speedFrom,proto3" json:"speed_from,omitempty"`
	SpeedTo       float64  `protobuf:"fixed64,7,opt,name=speed_to,json=speedTo,proto3" json:"speed_to,omitempty"`
	DateFrom      int64    `protobuf:"varint,8,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	DateTo        int64    `protobuf:"varint,9,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	Sorting       string   `protobuf:"bytes,10,opt,name=sorting,proto3" json:"sorting,omitempty"` // "asc" or "desc"
	SortingColumn string   `protobuf:"bytes,11,opt,name=sorting_column,json=sortingColumn,proto3" json:"sorting_column,omitempty"`
}

func (x *RecognitionsFilter) Reset() {
	*x = RecognitionsFilter{}
	mi := &file_manager_radar_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecognitionsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionsFilter) ProtoMessage() {}

func (x *RecognitionsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionsFilter.ProtoReflect.Descriptor instead.
func (*RecognitionsFilter) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{5}
}

func (x *RecognitionsFilter) GetSensorIds() []string {
	if x != nil {
		return x.SensorIds
	}
	return nil
}

func (x *RecognitionsFilter) GetHeadingFrom() float64 {
	if x != nil {
		return x.HeadingFrom
	}
	return 0
}

func (x *RecognitionsFilter) GetHeadingTo() float64 {
	if x != nil {
		return x.HeadingTo
	}
	return 0
}

func (x *RecognitionsFilter) GetLengthFrom() float64 {
	if x != nil {
		return x.LengthFrom
	}
	return 0
}

func (x *RecognitionsFilter) GetLengthTo() float64 {
	if x != nil {
		return x.LengthTo
	}
	return 0
}

func (x *RecognitionsFilter) GetSpeedFrom() float64 {
	if x != nil {
		return x.SpeedFrom
	}
	return 0
}

func (x *RecognitionsFilter) GetSpeedTo() float64 {
	if x != nil {
		return x.SpeedTo
	}
	return 0
}

func (x *RecognitionsFilter) GetDateFrom() int64 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *RecognitionsFilter) GetDateTo() int64 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

func (x *RecognitionsFilter) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *RecognitionsFilter) GetSortingColumn() string {
	if x != nil {
		return x.SortingColumn
	}
	return ""
}

type GetTransportObjectInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         // номер страницы
	PageSize int64               `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // кол-во объектов на странице
	Filter   *RecognitionsFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetTransportObjectInfoRequest) Reset() {
	*x = GetTransportObjectInfoRequest{}
	mi := &file_manager_radar_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportObjectInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportObjectInfoRequest) ProtoMessage() {}

func (x *GetTransportObjectInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportObjectInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTransportObjectInfoRequest) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{6}
}

func (x *GetTransportObjectInfoRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTransportObjectInfoRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTransportObjectInfoRequest) GetFilter() *RecognitionsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type TransportObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SensorId    string               `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	OriginId    string               `protobuf:"bytes,3,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	Coordinates []byte               `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"` // JSON-encoded координаты
	Color       string               `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Speed       float64              `protobuf:"fixed64,6,opt,name=speed,proto3" json:"speed,omitempty"`
	Heading     float64              `protobuf:"fixed64,7,opt,name=heading,proto3" json:"heading,omitempty"`
	Length      float64              `protobuf:"fixed64,8,opt,name=length,proto3" json:"length,omitempty"`
	Date        int64                `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TransportObjectInfo) Reset() {
	*x = TransportObjectInfo{}
	mi := &file_manager_radar_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportObjectInfo) ProtoMessage() {}

func (x *TransportObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportObjectInfo.ProtoReflect.Descriptor instead.
func (*TransportObjectInfo) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{7}
}

func (x *TransportObjectInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransportObjectInfo) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *TransportObjectInfo) GetOriginId() string {
	if x != nil {
		return x.OriginId
	}
	return ""
}

func (x *TransportObjectInfo) GetCoordinates() []byte {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *TransportObjectInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TransportObjectInfo) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *TransportObjectInfo) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *TransportObjectInfo) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TransportObjectInfo) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *TransportObjectInfo) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetTransportObjectInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*TransportObjectInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Page       int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalItems int64                  `protobuf:"varint,4,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`
}

func (x *GetTransportObjectInfoResponse) Reset() {
	*x = GetTransportObjectInfoResponse{}
	mi := &file_manager_radar_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportObjectInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportObjectInfoResponse) ProtoMessage() {}

func (x *GetTransportObjectInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportObjectInfoResponse.ProtoReflect.Descriptor instead.
func (*GetTransportObjectInfoResponse) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{8}
}

func (x *GetTransportObjectInfoResponse) GetData() []*TransportObjectInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTransportObjectInfoResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTransportObjectInfoResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTransportObjectInfoResponse) GetTotalItems() int64 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

// Запрос на получение информации о радаре по ID
type GetRadarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Идентификатор радара
}

func (x *GetRadarRequest) Reset() {
	*x = GetRadarRequest{}
	mi := &file_manager_radar_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRadarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRadarRequest) ProtoMessage() {}

func (x *GetRadarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRadarRequest.ProtoReflect.Descriptor instead.
func (*GetRadarRequest) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{9}
}

func (x *GetRadarRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Запрос на удаление радара по ID
type DeleteRadarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Идентификатор радара
}

func (x *DeleteRadarRequest) Reset() {
	*x = DeleteRadarRequest{}
	mi := &file_manager_radar_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRadarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRadarRequest) ProtoMessage() {}

func (x *DeleteRadarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRadarRequest.ProtoReflect.Descriptor instead.
func (*DeleteRadarRequest) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRadarRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Ответ с временными зонами
type TimeZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeZones []*TimeZone `protobuf:"bytes,1,rep,name=time_zones,json=timeZones,proto3" json:"time_zones,omitempty"` // Список временных зон
}

func (x *TimeZonesResponse) Reset() {
	*x = TimeZonesResponse{}
	mi := &file_manager_radar_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZonesResponse) ProtoMessage() {}

func (x *TimeZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZonesResponse.ProtoReflect.Descriptor instead.
func (*TimeZonesResponse) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{11}
}

func (x *TimeZonesResponse) GetTimeZones() []*TimeZone {
	if x != nil {
		return x.TimeZones
	}
	return nil
}

type TimeZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	TimeZone string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *TimeZone) Reset() {
	*x = TimeZone{}
	mi := &file_manager_radar_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZone) ProtoMessage() {}

func (x *TimeZone) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZone.ProtoReflect.Descriptor instead.
func (*TimeZone) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{12}
}

func (x *TimeZone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TimeZone) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *TimeZone) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// Ответ с моделями радара
type RadarModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models []*RadarModel `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"` // Список моделей радара
}

func (x *RadarModelsResponse) Reset() {
	*x = RadarModelsResponse{}
	mi := &file_manager_radar_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RadarModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarModelsResponse) ProtoMessage() {}

func (x *RadarModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarModelsResponse.ProtoReflect.Descriptor instead.
func (*RadarModelsResponse) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{13}
}

func (x *RadarModelsResponse) GetModels() []*RadarModel {
	if x != nil {
		return x.Models
	}
	return nil
}

// Структура модели радара
type RadarModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Идентификатор модели
	Alias        string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`                          // Алиас модели
	ModelName    string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"` // Название модели
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`            // Производитель модели
}

func (x *RadarModel) Reset() {
	*x = RadarModel{}
	mi := &file_manager_radar_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RadarModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarModel) ProtoMessage() {}

func (x *RadarModel) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarModel.ProtoReflect.Descriptor instead.
func (*RadarModel) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{14}
}

func (x *RadarModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RadarModel) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RadarModel) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *RadarModel) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                               // Идентификатор Пуида
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // Название Пуида
	Address        string               `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                                     // Адрес
	Lat            float64              `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`                                           // Широта
	Lon            float64              `protobuf:"fixed64,5,opt,name=lon,proto3" json:"lon,omitempty"`                                           // Долгота
	Serial         string               `protobuf:"bytes,6,opt,name=serial,proto3" json:"serial,omitempty"`                                       // Серийный номер
	ProductionDate *timestamp.Timestamp `protobuf:"bytes,7,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"` // Дата производства
	Note           *string              `protobuf:"bytes,8,opt,name=note,proto3,oneof" json:"note,omitempty"`                                     // Примечание
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_manager_radar_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{15}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Device) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Device) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Device) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *Device) GetProductionDate() *timestamp.Timestamp {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *Device) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type DeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	mi := &file_manager_radar_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	mi := &file_manager_radar_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_radar_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_manager_radar_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

var File_manager_radar_proto protoreflect.FileDescriptor

var file_manager_radar_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2d, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x33, 0x0a, 0x0d, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x05, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x22, 0x36, 0x0a, 0x0e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x52, 0x06, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73, 0x22, 0x38, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52,
	0x05, 0x72, 0x61, 0x64, 0x61, 0x72, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x05,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x05, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x22, 0xe4, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x54, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x65, 0x64, 0x54, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x22, 0x54, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x40, 0x0a, 0x13, 0x52, 0x61, 0x64, 0x61, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x75, 0x0a, 0x0a, 0x52, 0x61, 0x64, 0x61,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22,
	0xe9, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x32, 0xb5, 0x05, 0x0a, 0x0c, 0x52, 0x61, 0x64, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x64,
	0x61, 0x72, 0x12, 0x19, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x64,
	0x61, 0x72, 0x12, 0x19, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x61, 0x64, 0x61, 0x72, 0x12,
	0x16, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x64, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e,
	0x52, 0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x64, 0x61, 0x72, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x61,
	0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x64, 0x61, 0x72, 0x12, 0x19, 0x2e, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x64, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x64, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x61, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x6c,
	0x2e, 0x6e, 0x70, 0x6f, 0x2d, 0x69, 0x74, 0x73, 0x2e, 0x72, 0x75, 0x2f, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x72, 0x61, 0x64, 0x61, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_manager_radar_proto_rawDescOnce sync.Once
	file_manager_radar_proto_rawDescData = file_manager_radar_proto_rawDesc
)

func file_manager_radar_proto_rawDescGZIP() []byte {
	file_manager_radar_proto_rawDescOnce.Do(func() {
		file_manager_radar_proto_rawDescData = protoimpl.X.CompressGZIP(file_manager_radar_proto_rawDescData)
	})
	return file_manager_radar_proto_rawDescData
}

var file_manager_radar_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_manager_radar_proto_goTypes = []any{
	(*Radar)(nil),                          // 0: radar.Radar
	(*RadarResponse)(nil),                  // 1: radar.RadarResponse
	(*RadarsResponse)(nil),                 // 2: radar.RadarsResponse
	(*CreateRadarRequest)(nil),             // 3: radar.CreateRadarRequest
	(*UpdateRadarRequest)(nil),             // 4: radar.UpdateRadarRequest
	(*RecognitionsFilter)(nil),             // 5: radar.RecognitionsFilter
	(*GetTransportObjectInfoRequest)(nil),  // 6: radar.GetTransportObjectInfoRequest
	(*TransportObjectInfo)(nil),            // 7: radar.TransportObjectInfo
	(*GetTransportObjectInfoResponse)(nil), // 8: radar.GetTransportObjectInfoResponse
	(*GetRadarRequest)(nil),                // 9: radar.GetRadarRequest
	(*DeleteRadarRequest)(nil),             // 10: radar.DeleteRadarRequest
	(*TimeZonesResponse)(nil),              // 11: radar.TimeZonesResponse
	(*TimeZone)(nil),                       // 12: radar.TimeZone
	(*RadarModelsResponse)(nil),            // 13: radar.RadarModelsResponse
	(*RadarModel)(nil),                     // 14: radar.RadarModel
	(*Device)(nil),                         // 15: radar.Device
	(*DeviceResponse)(nil),                 // 16: radar.DeviceResponse
	(*UpdateDeviceRequest)(nil),            // 17: radar.UpdateDeviceRequest
	(*timestamp.Timestamp)(nil),            // 18: google.protobuf.Timestamp
	(*empty.Empty)(nil),                    // 19: google.protobuf.Empty
}
var file_manager_radar_proto_depIdxs = []int32{
	0,  // 0: radar.RadarResponse.radar:type_name -> radar.Radar
	0,  // 1: radar.RadarsResponse.radars:type_name -> radar.Radar
	0,  // 2: radar.CreateRadarRequest.radar:type_name -> radar.Radar
	0,  // 3: radar.UpdateRadarRequest.radar:type_name -> radar.Radar
	5,  // 4: radar.GetTransportObjectInfoRequest.filter:type_name -> radar.RecognitionsFilter
	18, // 5: radar.TransportObjectInfo.created_at:type_name -> google.protobuf.Timestamp
	7,  // 6: radar.GetTransportObjectInfoResponse.data:type_name -> radar.TransportObjectInfo
	12, // 7: radar.TimeZonesResponse.time_zones:type_name -> radar.TimeZone
	14, // 8: radar.RadarModelsResponse.models:type_name -> radar.RadarModel
	18, // 9: radar.Device.production_date:type_name -> google.protobuf.Timestamp
	15, // 10: radar.DeviceResponse.device:type_name -> radar.Device
	15, // 11: radar.UpdateDeviceRequest.device:type_name -> radar.Device
	3,  // 12: radar.RadarService.CreateRadar:input_type -> radar.CreateRadarRequest
	4,  // 13: radar.RadarService.UpdateRadar:input_type -> radar.UpdateRadarRequest
	9,  // 14: radar.RadarService.GetRadar:input_type -> radar.GetRadarRequest
	19, // 15: radar.RadarService.GetAllRadars:input_type -> google.protobuf.Empty
	10, // 16: radar.RadarService.DeleteRadar:input_type -> radar.DeleteRadarRequest
	19, // 17: radar.RadarService.GetTimeZones:input_type -> google.protobuf.Empty
	19, // 18: radar.RadarService.GetRadarModels:input_type -> google.protobuf.Empty
	19, // 19: radar.RadarService.GetDevice:input_type -> google.protobuf.Empty
	17, // 20: radar.RadarService.UpdateDevice:input_type -> radar.UpdateDeviceRequest
	6,  // 21: radar.RadarService.GetTransportObjectInfo:input_type -> radar.GetTransportObjectInfoRequest
	1,  // 22: radar.RadarService.CreateRadar:output_type -> radar.RadarResponse
	1,  // 23: radar.RadarService.UpdateRadar:output_type -> radar.RadarResponse
	1,  // 24: radar.RadarService.GetRadar:output_type -> radar.RadarResponse
	2,  // 25: radar.RadarService.GetAllRadars:output_type -> radar.RadarsResponse
	1,  // 26: radar.RadarService.DeleteRadar:output_type -> radar.RadarResponse
	11, // 27: radar.RadarService.GetTimeZones:output_type -> radar.TimeZonesResponse
	13, // 28: radar.RadarService.GetRadarModels:output_type -> radar.RadarModelsResponse
	16, // 29: radar.RadarService.GetDevice:output_type -> radar.DeviceResponse
	16, // 30: radar.RadarService.UpdateDevice:output_type -> radar.DeviceResponse
	8,  // 31: radar.RadarService.GetTransportObjectInfo:output_type -> radar.GetTransportObjectInfoResponse
	22, // [22:32] is the sub-list for method output_type
	12, // [12:22] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_manager_radar_proto_init() }
func file_manager_radar_proto_init() {
	if File_manager_radar_proto != nil {
		return
	}
	file_manager_radar_proto_msgTypes[0].OneofWrappers = []any{}
	file_manager_radar_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manager_radar_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_radar_proto_goTypes,
		DependencyIndexes: file_manager_radar_proto_depIdxs,
		MessageInfos:      file_manager_radar_proto_msgTypes,
	}.Build()
	File_manager_radar_proto = out.File
	file_manager_radar_proto_rawDesc = nil
	file_manager_radar_proto_goTypes = nil
	file_manager_radar_proto_depIdxs = nil
}
